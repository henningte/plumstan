// Generated by rstantools.  Do not edit by hand.

/*
    plumstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    plumstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with plumstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1
#include <stan/model/model_header.hpp>
namespace model_plumstan_model_cs_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_plumstan_model_cs");
    reader.add_event(190, 188, "end", "model_plumstan_model_cs");
    return reader;
}
#include <stan_meta_header.hpp>
class model_plumstan_model_cs : public prob_grad {
private:
    int data_chronology_n;
    int data_supported_n;
    int increments_n;
    int data_cs_n;
    vector<double> data_chronology_y;
    vector<double> data_chronology_y_sd;
    vector<double> data_supported_y;
    vector<double> data_supported_y_sd;
    vector<double> data_chronology_depth;
    vector<double> data_chronology_density;
    vector_d data_supported_density;
    vector<double> increments_thickness;
    vector<double> increments_depth_upper;
    vector<int> index_depth_increments_lower;
    vector<int> index_depth_increments_upper;
    double lambda;
    vector<double> data_cs_age;
    vector<double> data_cs_age_sd;
    vector<int> data_cs_index;
    double prior_phi_alpha;
    double prior_phi_beta;
    double prior_omega_alpha;
    double prior_omega_beta;
    double prior_alpha_alpha;
    double prior_alpha_beta;
    double prior_data_supported_alpha;
    double prior_data_supported_beta;
public:
    model_plumstan_model_cs(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_plumstan_model_cs(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_plumstan_model_cs_namespace::model_plumstan_model_cs";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        // initialize member variables
        try {
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "data_chronology_n", "int", context__.to_vec());
            data_chronology_n = int(0);
            vals_i__ = context__.vals_i("data_chronology_n");
            pos__ = 0;
            data_chronology_n = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "data_supported_n", "int", context__.to_vec());
            data_supported_n = int(0);
            vals_i__ = context__.vals_i("data_supported_n");
            pos__ = 0;
            data_supported_n = vals_i__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "increments_n", "int", context__.to_vec());
            increments_n = int(0);
            vals_i__ = context__.vals_i("increments_n");
            pos__ = 0;
            increments_n = vals_i__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "data_cs_n", "int", context__.to_vec());
            data_cs_n = int(0);
            vals_i__ = context__.vals_i("data_cs_n");
            pos__ = 0;
            data_cs_n = vals_i__[pos__++];
            current_statement_begin__ = 16;
            validate_non_negative_index("data_chronology_y", "data_chronology_n", data_chronology_n);
            context__.validate_dims("data initialization", "data_chronology_y", "double", context__.to_vec(data_chronology_n));
            validate_non_negative_index("data_chronology_y", "data_chronology_n", data_chronology_n);
            data_chronology_y = std::vector<double>(data_chronology_n,double(0));
            vals_r__ = context__.vals_r("data_chronology_y");
            pos__ = 0;
            size_t data_chronology_y_limit_0__ = data_chronology_n;
            for (size_t i_0__ = 0; i_0__ < data_chronology_y_limit_0__; ++i_0__) {
                data_chronology_y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("data_chronology_y_sd", "data_chronology_n", data_chronology_n);
            context__.validate_dims("data initialization", "data_chronology_y_sd", "double", context__.to_vec(data_chronology_n));
            validate_non_negative_index("data_chronology_y_sd", "data_chronology_n", data_chronology_n);
            data_chronology_y_sd = std::vector<double>(data_chronology_n,double(0));
            vals_r__ = context__.vals_r("data_chronology_y_sd");
            pos__ = 0;
            size_t data_chronology_y_sd_limit_0__ = data_chronology_n;
            for (size_t i_0__ = 0; i_0__ < data_chronology_y_sd_limit_0__; ++i_0__) {
                data_chronology_y_sd[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("data_supported_y", "data_supported_n", data_supported_n);
            context__.validate_dims("data initialization", "data_supported_y", "double", context__.to_vec(data_supported_n));
            validate_non_negative_index("data_supported_y", "data_supported_n", data_supported_n);
            data_supported_y = std::vector<double>(data_supported_n,double(0));
            vals_r__ = context__.vals_r("data_supported_y");
            pos__ = 0;
            size_t data_supported_y_limit_0__ = data_supported_n;
            for (size_t i_0__ = 0; i_0__ < data_supported_y_limit_0__; ++i_0__) {
                data_supported_y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("data_supported_y_sd", "data_supported_n", data_supported_n);
            context__.validate_dims("data initialization", "data_supported_y_sd", "double", context__.to_vec(data_supported_n));
            validate_non_negative_index("data_supported_y_sd", "data_supported_n", data_supported_n);
            data_supported_y_sd = std::vector<double>(data_supported_n,double(0));
            vals_r__ = context__.vals_r("data_supported_y_sd");
            pos__ = 0;
            size_t data_supported_y_sd_limit_0__ = data_supported_n;
            for (size_t i_0__ = 0; i_0__ < data_supported_y_sd_limit_0__; ++i_0__) {
                data_supported_y_sd[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("data_chronology_depth", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            context__.validate_dims("data initialization", "data_chronology_depth", "double", context__.to_vec((data_chronology_n + data_cs_n)));
            validate_non_negative_index("data_chronology_depth", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            data_chronology_depth = std::vector<double>((data_chronology_n + data_cs_n),double(0));
            vals_r__ = context__.vals_r("data_chronology_depth");
            pos__ = 0;
            size_t data_chronology_depth_limit_0__ = (data_chronology_n + data_cs_n);
            for (size_t i_0__ = 0; i_0__ < data_chronology_depth_limit_0__; ++i_0__) {
                data_chronology_depth[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("data_chronology_density", "data_chronology_n", data_chronology_n);
            context__.validate_dims("data initialization", "data_chronology_density", "double", context__.to_vec(data_chronology_n));
            validate_non_negative_index("data_chronology_density", "data_chronology_n", data_chronology_n);
            data_chronology_density = std::vector<double>(data_chronology_n,double(0));
            vals_r__ = context__.vals_r("data_chronology_density");
            pos__ = 0;
            size_t data_chronology_density_limit_0__ = data_chronology_n;
            for (size_t i_0__ = 0; i_0__ < data_chronology_density_limit_0__; ++i_0__) {
                data_chronology_density[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("data_supported_density", "data_supported_n", data_supported_n);
            context__.validate_dims("data initialization", "data_supported_density", "vector_d", context__.to_vec(data_supported_n));
            validate_non_negative_index("data_supported_density", "data_supported_n", data_supported_n);
            data_supported_density = vector_d(static_cast<Eigen::VectorXd::Index>(data_supported_n));
            vals_r__ = context__.vals_r("data_supported_density");
            pos__ = 0;
            size_t data_supported_density_i_vec_lim__ = data_supported_n;
            for (size_t i_vec__ = 0; i_vec__ < data_supported_density_i_vec_lim__; ++i_vec__) {
                data_supported_density[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("increments_thickness", "increments_n", increments_n);
            context__.validate_dims("data initialization", "increments_thickness", "double", context__.to_vec(increments_n));
            validate_non_negative_index("increments_thickness", "increments_n", increments_n);
            increments_thickness = std::vector<double>(increments_n,double(0));
            vals_r__ = context__.vals_r("increments_thickness");
            pos__ = 0;
            size_t increments_thickness_limit_0__ = increments_n;
            for (size_t i_0__ = 0; i_0__ < increments_thickness_limit_0__; ++i_0__) {
                increments_thickness[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("increments_depth_upper", "increments_n", increments_n);
            context__.validate_dims("data initialization", "increments_depth_upper", "double", context__.to_vec(increments_n));
            validate_non_negative_index("increments_depth_upper", "increments_n", increments_n);
            increments_depth_upper = std::vector<double>(increments_n,double(0));
            vals_r__ = context__.vals_r("increments_depth_upper");
            pos__ = 0;
            size_t increments_depth_upper_limit_0__ = increments_n;
            for (size_t i_0__ = 0; i_0__ < increments_depth_upper_limit_0__; ++i_0__) {
                increments_depth_upper[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("index_depth_increments_lower", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            context__.validate_dims("data initialization", "index_depth_increments_lower", "int", context__.to_vec((data_chronology_n + data_cs_n)));
            validate_non_negative_index("index_depth_increments_lower", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            index_depth_increments_lower = std::vector<int>((data_chronology_n + data_cs_n),int(0));
            vals_i__ = context__.vals_i("index_depth_increments_lower");
            pos__ = 0;
            size_t index_depth_increments_lower_limit_0__ = (data_chronology_n + data_cs_n);
            for (size_t i_0__ = 0; i_0__ < index_depth_increments_lower_limit_0__; ++i_0__) {
                index_depth_increments_lower[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("index_depth_increments_upper", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            context__.validate_dims("data initialization", "index_depth_increments_upper", "int", context__.to_vec((data_chronology_n + data_cs_n)));
            validate_non_negative_index("index_depth_increments_upper", "(data_chronology_n + data_cs_n)", (data_chronology_n + data_cs_n));
            index_depth_increments_upper = std::vector<int>((data_chronology_n + data_cs_n),int(0));
            vals_i__ = context__.vals_i("index_depth_increments_upper");
            pos__ = 0;
            size_t index_depth_increments_upper_limit_0__ = (data_chronology_n + data_cs_n);
            for (size_t i_0__ = 0; i_0__ < index_depth_increments_upper_limit_0__; ++i_0__) {
                index_depth_increments_upper[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
            lambda = double(0);
            vals_r__ = context__.vals_r("lambda");
            pos__ = 0;
            lambda = vals_r__[pos__++];
            current_statement_begin__ = 42;
            validate_non_negative_index("data_cs_age", "data_cs_n", data_cs_n);
            context__.validate_dims("data initialization", "data_cs_age", "double", context__.to_vec(data_cs_n));
            validate_non_negative_index("data_cs_age", "data_cs_n", data_cs_n);
            data_cs_age = std::vector<double>(data_cs_n,double(0));
            vals_r__ = context__.vals_r("data_cs_age");
            pos__ = 0;
            size_t data_cs_age_limit_0__ = data_cs_n;
            for (size_t i_0__ = 0; i_0__ < data_cs_age_limit_0__; ++i_0__) {
                data_cs_age[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("data_cs_age_sd", "data_cs_n", data_cs_n);
            context__.validate_dims("data initialization", "data_cs_age_sd", "double", context__.to_vec(data_cs_n));
            validate_non_negative_index("data_cs_age_sd", "data_cs_n", data_cs_n);
            data_cs_age_sd = std::vector<double>(data_cs_n,double(0));
            vals_r__ = context__.vals_r("data_cs_age_sd");
            pos__ = 0;
            size_t data_cs_age_sd_limit_0__ = data_cs_n;
            for (size_t i_0__ = 0; i_0__ < data_cs_age_sd_limit_0__; ++i_0__) {
                data_cs_age_sd[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("data_cs_index", "data_cs_n", data_cs_n);
            context__.validate_dims("data initialization", "data_cs_index", "int", context__.to_vec(data_cs_n));
            validate_non_negative_index("data_cs_index", "data_cs_n", data_cs_n);
            data_cs_index = std::vector<int>(data_cs_n,int(0));
            vals_i__ = context__.vals_i("data_cs_index");
            pos__ = 0;
            size_t data_cs_index_limit_0__ = data_cs_n;
            for (size_t i_0__ = 0; i_0__ < data_cs_index_limit_0__; ++i_0__) {
                data_cs_index[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "prior_phi_alpha", "double", context__.to_vec());
            prior_phi_alpha = double(0);
            vals_r__ = context__.vals_r("prior_phi_alpha");
            pos__ = 0;
            prior_phi_alpha = vals_r__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "prior_phi_beta", "double", context__.to_vec());
            prior_phi_beta = double(0);
            vals_r__ = context__.vals_r("prior_phi_beta");
            pos__ = 0;
            prior_phi_beta = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "prior_omega_alpha", "double", context__.to_vec());
            prior_omega_alpha = double(0);
            vals_r__ = context__.vals_r("prior_omega_alpha");
            pos__ = 0;
            prior_omega_alpha = vals_r__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "prior_omega_beta", "double", context__.to_vec());
            prior_omega_beta = double(0);
            vals_r__ = context__.vals_r("prior_omega_beta");
            pos__ = 0;
            prior_omega_beta = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "prior_alpha_alpha", "double", context__.to_vec());
            prior_alpha_alpha = double(0);
            vals_r__ = context__.vals_r("prior_alpha_alpha");
            pos__ = 0;
            prior_alpha_alpha = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "prior_alpha_beta", "double", context__.to_vec());
            prior_alpha_beta = double(0);
            vals_r__ = context__.vals_r("prior_alpha_beta");
            pos__ = 0;
            prior_alpha_beta = vals_r__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "prior_data_supported_alpha", "double", context__.to_vec());
            prior_data_supported_alpha = double(0);
            vals_r__ = context__.vals_r("prior_data_supported_alpha");
            pos__ = 0;
            prior_data_supported_alpha = vals_r__[pos__++];
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "prior_data_supported_beta", "double", context__.to_vec());
            prior_data_supported_beta = double(0);
            vals_r__ = context__.vals_r("prior_data_supported_beta");
            pos__ = 0;
            prior_data_supported_beta = vals_r__[pos__++];
            // validate, data variables
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"data_chronology_n",data_chronology_n,1);
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"data_supported_n",data_supported_n,1);
            current_statement_begin__ = 10;
            check_greater_or_equal(function__,"increments_n",increments_n,1);
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"data_cs_n",data_cs_n,1);
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            for (int k0__ = 0; k0__ < data_chronology_n; ++k0__) {
                check_greater_or_equal(function__,"data_chronology_y_sd[k0__]",data_chronology_y_sd[k0__],0);
            }
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            for (int k0__ = 0; k0__ < data_supported_n; ++k0__) {
                check_greater_or_equal(function__,"data_supported_y_sd[k0__]",data_supported_y_sd[k0__],0);
            }
            current_statement_begin__ = 22;
            for (int k0__ = 0; k0__ < (data_chronology_n + data_cs_n); ++k0__) {
                check_greater_or_equal(function__,"data_chronology_depth[k0__]",data_chronology_depth[k0__],0);
            }
            current_statement_begin__ = 25;
            for (int k0__ = 0; k0__ < data_chronology_n; ++k0__) {
                check_greater_or_equal(function__,"data_chronology_density[k0__]",data_chronology_density[k0__],0);
            }
            current_statement_begin__ = 26;
            current_statement_begin__ = 29;
            for (int k0__ = 0; k0__ < increments_n; ++k0__) {
                check_greater_or_equal(function__,"increments_thickness[k0__]",increments_thickness[k0__],0);
            }
            current_statement_begin__ = 30;
            for (int k0__ = 0; k0__ < increments_n; ++k0__) {
                check_greater_or_equal(function__,"increments_depth_upper[k0__]",increments_depth_upper[k0__],0);
            }
            current_statement_begin__ = 33;
            for (int k0__ = 0; k0__ < (data_chronology_n + data_cs_n); ++k0__) {
                check_greater_or_equal(function__,"index_depth_increments_lower[k0__]",index_depth_increments_lower[k0__],1);
            }
            current_statement_begin__ = 36;
            for (int k0__ = 0; k0__ < (data_chronology_n + data_cs_n); ++k0__) {
                check_greater_or_equal(function__,"index_depth_increments_upper[k0__]",index_depth_increments_upper[k0__],1);
            }
            current_statement_begin__ = 39;
            current_statement_begin__ = 42;
            for (int k0__ = 0; k0__ < data_cs_n; ++k0__) {
                check_greater_or_equal(function__,"data_cs_age[k0__]",data_cs_age[k0__],0);
            }
            current_statement_begin__ = 45;
            for (int k0__ = 0; k0__ < data_cs_n; ++k0__) {
                check_greater_or_equal(function__,"data_cs_age_sd[k0__]",data_cs_age_sd[k0__],0);
            }
            current_statement_begin__ = 48;
            for (int k0__ = 0; k0__ < data_cs_n; ++k0__) {
                check_greater_or_equal(function__,"data_cs_index[k0__]",data_cs_index[k0__],1);
            }
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            current_statement_begin__ = 58;
            // initialize data variables
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 64;
            ++num_params_r__;
            current_statement_begin__ = 67;
            ++num_params_r__;
            current_statement_begin__ = 70;
            ++num_params_r__;
            current_statement_begin__ = 73;
            validate_non_negative_index("alpha", "increments_n", increments_n);
            num_params_r__ += increments_n;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_plumstan_model_cs() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }
        if (!(context__.contains_r("omega")))
            throw std::runtime_error("variable omega missing");
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        context__.validate_dims("initialization", "omega", "double", context__.to_vec());
        double omega(0);
        omega = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable omega: ") + e.what());
        }
        if (!(context__.contains_r("data_supported_alpha")))
            throw std::runtime_error("variable data_supported_alpha missing");
        vals_r__ = context__.vals_r("data_supported_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "data_supported_alpha", "double", context__.to_vec());
        double data_supported_alpha(0);
        data_supported_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(data_supported_alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable data_supported_alpha: ") + e.what());
        }
        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "increments_n", increments_n);
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(increments_n));
        std::vector<double> alpha(increments_n,double(0));
        for (int i0__ = 0U; i0__ < increments_n; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < increments_n; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0,lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            local_scalar_t__ omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.scalar_lub_constrain(0,1,lp__);
            else
                omega = in__.scalar_lub_constrain(0,1);
            local_scalar_t__ data_supported_alpha;
            (void) data_supported_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                data_supported_alpha = in__.scalar_constrain(lp__);
            else
                data_supported_alpha = in__.scalar_constrain();
            vector<local_scalar_t__> alpha;
            size_t dim_alpha_0__ = increments_n;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 79;
            validate_non_negative_index("m", "increments_n", increments_n);
            vector<local_scalar_t__> m(increments_n);
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m,DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("p_tot", "data_chronology_n", data_chronology_n);
            vector<local_scalar_t__> p_tot(data_chronology_n);
            stan::math::initialize(p_tot, DUMMY_VAR__);
            stan::math::fill(p_tot,DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("t", "((data_chronology_n + 1) + data_cs_n)", ((data_chronology_n + 1) + data_cs_n));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  t(static_cast<Eigen::VectorXd::Index>(((data_chronology_n + 1) + data_cs_n)));
            (void) t;  // dummy to suppress unused var warning
            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t,DUMMY_VAR__);
            current_statement_begin__ = 88;
            stan::model::assign(m, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(alpha,1,"alpha",1), 
                        "assigning variable m");
            current_statement_begin__ = 89;
            for (int k = 2; k <= increments_n; ++k) {
                current_statement_begin__ = 90;
                stan::model::assign(m, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            stan::model::deep_copy(((omega * get_base1(m,(k - 1),"m",1)) + ((1 - omega) * get_base1(alpha,k,"alpha",1)))), 
                            "assigning variable m");
            }
            current_statement_begin__ = 94;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni((data_chronology_n + 1)), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable t");
            current_statement_begin__ = 97;
            for (int i = 1; i <= data_cs_n; ++i) {
                current_statement_begin__ = 98;
                stan::model::assign(t, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(data_cs_index,i,"data_cs_index",1)), stan::model::nil_index_list()), 
                            get_base1(data_cs_age,i,"data_cs_age",1), 
                            "assigning variable t");
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= (data_chronology_n + data_cs_n); ++i) {
                current_statement_begin__ = 105;
                if (as_bool(logical_eq(get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),increments_n))) {
                    current_statement_begin__ = 107;
                    stan::model::assign(t, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(data_chronology_depth,i,"data_chronology_depth",1) - get_base1(increments_depth_upper,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"increments_depth_upper",1)) * get_base1(m,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"m",1)), 
                                "assigning variable t");
                } else {
                    current_statement_begin__ = 111;
                    stan::model::assign(t, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (dot_product(stan::model::rvalue(m, stan::model::cons_list(stan::model::index_min_max((get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1) + 1), get_base1(index_depth_increments_upper,i,"index_depth_increments_upper",1)), stan::model::nil_index_list()), "m"),stan::model::rvalue(increments_thickness, stan::model::cons_list(stan::model::index_min_max((get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1) + 1), get_base1(index_depth_increments_upper,i,"index_depth_increments_upper",1)), stan::model::nil_index_list()), "increments_thickness")) + ((get_base1(data_chronology_depth,i,"data_chronology_depth",1) - get_base1(increments_depth_upper,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"increments_depth_upper",1)) * get_base1(m,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"m",1))), 
                                "assigning variable t");
                }
            }
            current_statement_begin__ = 118;
            for (int i = 1; i <= data_chronology_n; ++i) {
                current_statement_begin__ = 120;
                stan::model::assign(p_tot, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((mean(multiply(data_supported_alpha,data_supported_density)) * 10) + ((phi / lambda) * (stan::math::exp((-(lambda) * get_base1(t,(i + 1),"t",1))) - stan::math::exp((-(lambda) * get_base1(t,i,"t",1)))))), 
                            "assigning variable p_tot");
            }
            // validate transformed parameters
            for (int i0__ = 0; i0__ < increments_n; ++i0__) {
                if (stan::math::is_uninitialized(m[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: m" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < data_chronology_n; ++i0__) {
                if (stan::math::is_uninitialized(p_tot[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_tot" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < ((data_chronology_n + 1) + data_cs_n); ++i0__) {
                if (stan::math::is_uninitialized(t(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: t" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 79;
            for (int k0__ = 0; k0__ < increments_n; ++k0__) {
                check_greater_or_equal(function__,"m[k0__]",m[k0__],0);
            }
            current_statement_begin__ = 82;
            current_statement_begin__ = 85;
            // model body
            current_statement_begin__ = 130;
            lp_accum__.add(gamma_log<propto__>(phi, prior_phi_alpha, prior_phi_beta));
            current_statement_begin__ = 133;
            lp_accum__.add(gamma_log<propto__>(data_supported_alpha, prior_data_supported_alpha, prior_data_supported_beta));
            current_statement_begin__ = 136;
            lp_accum__.add(beta_log<propto__>(omega, prior_omega_alpha, prior_omega_beta));
            current_statement_begin__ = 139;
            lp_accum__.add(gamma_log<propto__>(alpha, prior_alpha_alpha, prior_alpha_beta));
            current_statement_begin__ = 142;
            lp_accum__.add(normal_log<propto__>(data_cs_age, stan::model::rvalue(t, stan::model::cons_list(stan::model::index_multi(data_cs_index), stan::model::nil_index_list()), "t"), data_cs_age_sd));
            current_statement_begin__ = 143;
            lp_accum__.add(normal_log<propto__>(data_supported_y, data_supported_alpha, data_supported_y_sd));
            current_statement_begin__ = 144;
            lp_accum__.add(normal_log<propto__>(data_chronology_y, p_tot, data_chronology_y_sd));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("phi");
        names__.push_back("omega");
        names__.push_back("data_supported_alpha");
        names__.push_back("alpha");
        names__.push_back("m");
        names__.push_back("p_tot");
        names__.push_back("t");
        names__.push_back("p_tot_measured");
        names__.push_back("p_tot_artificial");
        names__.push_back("t_artificial");
        names__.push_back("log_lik");
        names__.push_back("dev");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(increments_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(increments_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(data_chronology_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((data_chronology_n + 1) + data_cs_n));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(data_chronology_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(increments_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(increments_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(data_chronology_n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_plumstan_model_cs_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double phi = in__.scalar_lb_constrain(0);
        double omega = in__.scalar_lub_constrain(0,1);
        double data_supported_alpha = in__.scalar_constrain();
        vector<double> alpha;
        size_t dim_alpha_0__ = increments_n;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        vars__.push_back(phi);
        vars__.push_back(omega);
        vars__.push_back(data_supported_alpha);
            for (int k_0__ = 0; k_0__ < increments_n; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            current_statement_begin__ = 79;
            validate_non_negative_index("m", "increments_n", increments_n);
            vector<local_scalar_t__> m(increments_n);
            stan::math::initialize(m, DUMMY_VAR__);
            stan::math::fill(m,DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("p_tot", "data_chronology_n", data_chronology_n);
            vector<local_scalar_t__> p_tot(data_chronology_n);
            stan::math::initialize(p_tot, DUMMY_VAR__);
            stan::math::fill(p_tot,DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("t", "((data_chronology_n + 1) + data_cs_n)", ((data_chronology_n + 1) + data_cs_n));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  t(static_cast<Eigen::VectorXd::Index>(((data_chronology_n + 1) + data_cs_n)));
            (void) t;  // dummy to suppress unused var warning
            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t,DUMMY_VAR__);
            current_statement_begin__ = 88;
            stan::model::assign(m, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(alpha,1,"alpha",1), 
                        "assigning variable m");
            current_statement_begin__ = 89;
            for (int k = 2; k <= increments_n; ++k) {
                current_statement_begin__ = 90;
                stan::model::assign(m, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            stan::model::deep_copy(((omega * get_base1(m,(k - 1),"m",1)) + ((1 - omega) * get_base1(alpha,k,"alpha",1)))), 
                            "assigning variable m");
            }
            current_statement_begin__ = 94;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni((data_chronology_n + 1)), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable t");
            current_statement_begin__ = 97;
            for (int i = 1; i <= data_cs_n; ++i) {
                current_statement_begin__ = 98;
                stan::model::assign(t, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(data_cs_index,i,"data_cs_index",1)), stan::model::nil_index_list()), 
                            get_base1(data_cs_age,i,"data_cs_age",1), 
                            "assigning variable t");
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= (data_chronology_n + data_cs_n); ++i) {
                current_statement_begin__ = 105;
                if (as_bool(logical_eq(get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),increments_n))) {
                    current_statement_begin__ = 107;
                    stan::model::assign(t, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((get_base1(data_chronology_depth,i,"data_chronology_depth",1) - get_base1(increments_depth_upper,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"increments_depth_upper",1)) * get_base1(m,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"m",1)), 
                                "assigning variable t");
                } else {
                    current_statement_begin__ = 111;
                    stan::model::assign(t, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (dot_product(stan::model::rvalue(m, stan::model::cons_list(stan::model::index_min_max((get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1) + 1), get_base1(index_depth_increments_upper,i,"index_depth_increments_upper",1)), stan::model::nil_index_list()), "m"),stan::model::rvalue(increments_thickness, stan::model::cons_list(stan::model::index_min_max((get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1) + 1), get_base1(index_depth_increments_upper,i,"index_depth_increments_upper",1)), stan::model::nil_index_list()), "increments_thickness")) + ((get_base1(data_chronology_depth,i,"data_chronology_depth",1) - get_base1(increments_depth_upper,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"increments_depth_upper",1)) * get_base1(m,get_base1(index_depth_increments_lower,i,"index_depth_increments_lower",1),"m",1))), 
                                "assigning variable t");
                }
            }
            current_statement_begin__ = 118;
            for (int i = 1; i <= data_chronology_n; ++i) {
                current_statement_begin__ = 120;
                stan::model::assign(p_tot, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((mean(multiply(data_supported_alpha,data_supported_density)) * 10) + ((phi / lambda) * (stan::math::exp((-(lambda) * get_base1(t,(i + 1),"t",1))) - stan::math::exp((-(lambda) * get_base1(t,i,"t",1)))))), 
                            "assigning variable p_tot");
            }
            // validate transformed parameters
            current_statement_begin__ = 79;
            for (int k0__ = 0; k0__ < increments_n; ++k0__) {
                check_greater_or_equal(function__,"m[k0__]",m[k0__],0);
            }
            current_statement_begin__ = 82;
            current_statement_begin__ = 85;
            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < increments_n; ++k_0__) {
            vars__.push_back(m[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < data_chronology_n; ++k_0__) {
            vars__.push_back(p_tot[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < ((data_chronology_n + 1) + data_cs_n); ++k_0__) {
            vars__.push_back(t[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 150;
            validate_non_negative_index("p_tot_measured", "data_chronology_n", data_chronology_n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p_tot_measured(static_cast<Eigen::VectorXd::Index>(data_chronology_n));
            (void) p_tot_measured;  // dummy to suppress unused var warning
            stan::math::initialize(p_tot_measured, DUMMY_VAR__);
            stan::math::fill(p_tot_measured,DUMMY_VAR__);
            current_statement_begin__ = 153;
            validate_non_negative_index("p_tot_artificial", "increments_n", increments_n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p_tot_artificial(static_cast<Eigen::VectorXd::Index>(increments_n));
            (void) p_tot_artificial;  // dummy to suppress unused var warning
            stan::math::initialize(p_tot_artificial, DUMMY_VAR__);
            stan::math::fill(p_tot_artificial,DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("t_artificial", "increments_n", increments_n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  t_artificial(static_cast<Eigen::VectorXd::Index>(increments_n));
            (void) t_artificial;  // dummy to suppress unused var warning
            stan::math::initialize(t_artificial, DUMMY_VAR__);
            stan::math::fill(t_artificial,DUMMY_VAR__);
            current_statement_begin__ = 159;
            validate_non_negative_index("log_lik", "data_chronology_n", data_chronology_n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(data_chronology_n));
            (void) log_lik;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 162;
            local_scalar_t__ dev;
            (void) dev;  // dummy to suppress unused var warning
            stan::math::initialize(dev, DUMMY_VAR__);
            stan::math::fill(dev,DUMMY_VAR__);
            current_statement_begin__ = 163;
            stan::math::assign(dev, 0);
            current_statement_begin__ = 166;
            for (int n = 1; n <= data_chronology_n; ++n) {
                current_statement_begin__ = 167;
                stan::model::assign(p_tot_measured, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_rng(get_base1(p_tot,n,"p_tot",1),get_base1(data_chronology_y_sd,n,"data_chronology_y_sd",1), base_rng__), 
                            "assigning variable p_tot_measured");
            }
            current_statement_begin__ = 171;
            for (int n = 1; n <= increments_n; ++n) {
                current_statement_begin__ = 172;
                stan::model::assign(p_tot_artificial, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            dot_product(stan::model::rvalue(m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list()), "m"),stan::model::rvalue(increments_thickness, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list()), "increments_thickness")), 
                            "assigning variable p_tot_artificial");
            }
            current_statement_begin__ = 176;
            for (int n = 1; n <= increments_n; ++n) {
                current_statement_begin__ = 177;
                stan::model::assign(t_artificial, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            dot_product(stan::model::rvalue(m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list()), "m"),stan::model::rvalue(increments_thickness, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list()), "increments_thickness")), 
                            "assigning variable t_artificial");
            }
            current_statement_begin__ = 181;
            stan::math::assign(dev, stan::model::deep_copy((dev + (-(2) * normal_cdf_log(data_chronology_y,p_tot,data_chronology_y_sd)))));
            current_statement_begin__ = 184;
            for (int n = 1; n <= data_chronology_n; ++n) {
                current_statement_begin__ = 185;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_log(get_base1(p_tot_measured,n,"p_tot_measured",1),get_base1(p_tot,n,"p_tot",1),get_base1(data_chronology_y_sd,n,"data_chronology_y_sd",1)), 
                            "assigning variable log_lik");
            }
            // validate generated quantities
            current_statement_begin__ = 150;
            current_statement_begin__ = 153;
            current_statement_begin__ = 156;
            current_statement_begin__ = 159;
            current_statement_begin__ = 162;
            // write generated quantities
            for (int k_0__ = 0; k_0__ < data_chronology_n; ++k_0__) {
            vars__.push_back(p_tot_measured[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < increments_n; ++k_0__) {
            vars__.push_back(p_tot_artificial[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < increments_n; ++k_0__) {
            vars__.push_back(t_artificial[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < data_chronology_n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
        vars__.push_back(dev);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_plumstan_model_cs";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "data_supported_alpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_tot" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= ((data_chronology_n + 1) + data_cs_n); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_tot_measured" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_tot_artificial" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_artificial" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "data_supported_alpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_tot" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= ((data_chronology_n + 1) + data_cs_n); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_tot_measured" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_tot_artificial" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= increments_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_artificial" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= data_chronology_n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}
typedef model_plumstan_model_cs_namespace::model_plumstan_model_cs stan_model;
#endif
